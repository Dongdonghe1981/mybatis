<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wh.mybatis.mapper.FilmMapper">

  <!--
  eviction
  -->
  <cache eviction="FIFO" flushInterval="6000" readOnly="false" size="100" type="net.sf.ehcache.Ehcache"></cache>

  <resultMap id="BaseResultMap" type="com.wh.mybatis.dto.Film">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="film_id" jdbcType="SMALLINT" property="filmId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="release_year" jdbcType="DATE" property="releaseYear" />
    <result column="language_id" jdbcType="TINYINT" property="languageId" />
    <result column="original_language_id" jdbcType="TINYINT" property="originalLanguageId" />
    <result column="rental_duration" jdbcType="TINYINT" property="rentalDuration" />
    <result column="rental_rate" jdbcType="DECIMAL" property="rentalRate" />
    <result column="length" jdbcType="SMALLINT" property="length" />
    <result column="replacement_cost" jdbcType="DECIMAL" property="replacementCost" />
    <result column="rating" jdbcType="CHAR" property="rating" />
    <result column="special_features" jdbcType="CHAR" property="specialFeatures" />
    <result column="last_update" jdbcType="TIMESTAMP" property="lastUpdate" />
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
  </resultMap>

  <!-- 支持OGNL表达式-->
  <select id="getFilm" resultType="com.wh.mybatis.dto.Film">
    <!--
    1. where 1=1
    2. 使用where 标签，只会去掉第一个and
    -->
    select * from film
    <where>
      <if test="filmId != null">and film_id = #{filmId}</if>
      <if test="title != null &amp;&amp; title != &quot;&quot;">and title like #{title}</if>
      <if test="rating !=null and rating.trim() != ''"> and rating = #{rating}</if>
    </where>
  </select>

  <!--
  prefix=给拼串后的字符串加个前缀
  prefixOverrides=前缀覆盖：去掉整个字符串前面多余的字符
  suffix=给拼串后的字符串加个后缀
  suffixOverrides=去掉整个字符串后面多余的字符
  -->
  <select id="getFilmTrim" resultType="com.wh.mybatis.dto.Film">
    select * from film where
    <trim  suffixOverrides="and" >
      <if test="filmId != null">film_id = #{filmId} and</if>
      <if test="title != null &amp;&amp; title != &quot;&quot;"> title like #{title} and</if>
      <if test="rating !=null and rating.trim() != ''"> rating = #{rating} and</if>
    </trim>
  </select>

  <select id="getFilmChoose" resultType="film">
    select * from film
    <where>
    <!-- 类似case when,只选取一个满足条件，不进行拼接 -->
      <choose>
        <when test="filmId != null">film_id = #{filmId}</when>
        <when test="rating !=null and rating.trim() != ''"> rating = #{rating}</when>
        <otherwise>1=1</otherwise>
      </choose>
    </where>
  </select>

  <update id="updateFilm" parameterType="film">
    update film
    <set>
      <if test="rentalDuration != null">rental_duration= #{rentalDuration} ,</if>
      <if test="rating !=null and rating.trim() != ''"> rating = #{rating} ,</if>
    </set>
    where film_id = #{filmId}
  </update>

  <update id="updateFilmTrim" parameterType="film">
    update film
    <trim prefix="set" suffixOverrides=",">
      <if test="rentalDuration != null">rental_duration= #{rentalDuration} ,</if>
      <if test="rating !=null and rating.trim() != ''"> rating = #{rating} ,</if>
    </trim>
    where film_id = #{filmId}
  </update>


  <select id="getFilmForEach" resultType="film">
    select * from film where film_id in
    <!--
    collection指定要遍历的集合，list的参数会特殊处理封装在map中，key就叫list
    item:当前遍历出的元素赋值给指定的变量
    separator:每个元素之间的分隔符
    open:遍历所有的结果拼接一个开始字符
    close:拼接一个结束的字符
    index：索引，遍历list的时候是索引，item是当前值；遍历map的时候，表示map的key，item是value
      #{变量名}就能取出变量的值，也就是当前遍历出的元素
    -->
    <foreach collection="ids" item="film_id" separator="," open="(" close=")">
        #{film_id}
    </foreach>
  </select>

  <insert id="addFilms">
    INSERT INTO film(title,language_id,rental_duration,rental_rate,replacement_cost)
    VALUES
    <foreach collection="films" item="film" separator=",">
      ( #{film.title},#{film.languageId},#{film.rentalDuration},#{film.rentalRate},#{film.replacementCost})
    </foreach>
  </insert>

  <!-- MySql连接属性：allowMultiQueries=true -->
  <insert id="addFilms2">
    <foreach collection="films" item="film" separator=";">
    INSERT INTO film(
      <include refid="refColumn"></include>
    ) VALUES
      ( #{film.title},#{film.languageId},#{film.rentalDuration},#{film.rentalRate},#{film.replacementCost})
    </foreach>
  </insert>

  <insert id="addOracle">
    <foreach collection="films" item="film"  open="begin" close="end;">
      INSERT INTO film(
      <include refid="refColumn"></include>
      ) VALUES
      ( #{film.title},#{film.languageId},#{film.rentalDuration},#{film.rentalRate},#{film.replacementCost})
    </foreach>
  </insert>

  <!--
    两个内置参数
    _parameter：代表整个参数
      单个参数：_parameter就是这个参数
      多个参数：参数会被封装为一个map,_parameter就是代表这个map
    _databaseId：如果配置了DatabaseIdProvider标签，_databaseId代表当前数据库的别名
  -->
  <select id="getFilmParameter" resultType="com.wh.mybatis.dto.Film">
      select * from film
      <if test="_parameter != null ">
        where film_id = #{_parameter.filmId}
      </if>
    <!-- <if test="_databaseId == 'oracle'"></if> -->
  </select>
  <!--
  抽取可重用的sql片段
  include 可以自定义一些property,sql标签内就可以使用自定义的属性${property}
  -->
  <sql id="refColumn">
    title,language_id,rental_duration,rental_rate,replacement_cost
  </sql>

  <select id="getFilmById" resultType="com.wh.mybatis.dto.Film">
    select * from film where film_id = #{filmId}
  </select>

  <select id="getAllFilm"  resultType="com.wh.mybatis.dto.Film">
    select * from film
  </select>
</mapper>