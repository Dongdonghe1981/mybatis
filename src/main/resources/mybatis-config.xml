<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	<!--
		引入外部properties配置文件的属性
		resources:引入类路径下的资源
		url:引入网络路径或本地路径下的资源
	-->
	<properties resource="dbconfig.properties"></properties>
	<!---->
	<settings>
		<!--驼峰命名规则映射-->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		<!-- 延迟加载 -->
		<setting name="lazyLoadingEnabled" value="true"/>
		<!-- 侵入延迟加载 -->
		<setting name="aggressiveLazyLoading" value="false"/>
	</settings>


	<!--
	typeAliases别名处理器，为java类型定义别名，别名不区分大小写
	默认是java类名的小写
	-->
	<typeAliases>
		<typeAlias type="com.wh.mybatis.dto.Users" alias="users"/>
		<!--
		package:为包下的所有类批量定义别名
			name:指定包名（为当前包以及所有的子包的每一个类都定义一个默认别名（类名小写））
		-->
		<package name="com.wh.mybatis.dto"/>
		<!--可以使用@Alias注解为bean起别名-->
	</typeAliases>

	<typeHandlers>
	</typeHandlers>
	<!--
		mybatis可以配置多种环境
		default默认指定某种环境，可以达到快速切换环境
		environment:配置一个具体的环境信息
		transactionManager和dataSource必须有
		transactionManager：事务管理器
			type:事务管理器类型[JDBC|MANAGED]
			    JDBC:JdbcTransactionFactory.class
				MANAGED:ManagedTransactionFactory.class 容器控制事务
				可以自定义事务管理器，实现TransactionFactory接口，type是全类名
		dataSource:数据源
			type:POOLED:PooledDataSourceFactory（连接池）
				JNDI:JndiDataSourceFactory
				UNPOOLED:UnpooledDataSourceFactory
				自定义数据源：实现DataSourceFactory接口，type是全类名
		id代表环境的唯一标识
	-->
	<environments default="mysql">
		<environment id="mysql">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		<!--
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${orcl.driver}" />
				<property name="url" value="${orcl.url}" />
				<property name="username" value="${orcl.username}" />
				<property name="password" value="${orcl.password}" />
			</dataSource>
		</environment>
		-->
	</environments>

	<!--
		支持多数据库提供商
		type="DB_VENDOR",VendorDatabaseIdProvider
		根据数据库供应商标识，执行对应的SQL
	-->
	<databaseIdProvider type="DB_VENDOR">
		<!--为不同的数据库供应商设定别名-->
		<property name="MySql" value="mysql"/>

		<property name="Oracle" value="oracle"/>
		<!--
		<property name="SQL Server" value="sqlserver"/>
		-->
	</databaseIdProvider>
	<!--
		注册一个sql映射
			resource:引入类路径下的sql映射文件
			url：引入磁盘或网络路径
			注册接口
				1.sql映射文件必须与接口同名，并在同一目录下
				2.没有sql映射文件，利用注解标注在接口上
				推荐：比较复杂的的DAO接口使用sql映射文件，简单的使用注解
	-->
	<mappers>
		<mapper resource="mapper/UsersMapper.xml"/>
		<mapper resource="mapper/UsersMapperPlus.xml"/>
		<mapper resource="mapper/DepartmentMapper.xml"/>
		<!--<mapper class="com.wh.mybatis.mapper.UsersMapperAnnotation"/>-->
		<!--批量注册-->
		<!--<package name="com.wh.mybatis.mapper"/>-->
	</mappers>


</configuration>